# ComplexHeatmap

```{r, results='hide', message=FALSE}
library(ComplexHeatmap)
```


## Heatmap examples with airway dataset

### Simple counts heatmap

```{r message=FALSE, results='hide'}
library(airway)
library(DESeq2)
data("airway")

# Perform DEA
dds <- DESeqDataSet(airway, design = ~ cell + dex)
dds <- DESeq(dds, betaPrior=FALSE)
res <- results(dds, contrast = c('dex','trt','untrt'))
res <- lfcShrink(dds, contrast = c('dex','trt','untrt'), res=res, type = 'normal')

# normalize counts 
dds <- vst(dds)
```

```{r echo=FALSE, results='hide'}
# significant genes to plot
sig_genes <- na.omit(as.data.frame(res))
sig_genes <- sig_genes[sig_genes$padj<0.05, ]

# count matrix
mat <- assay(dds)[rownames(sig_genes), ]

# meta for row
meta_row <- as.data.frame(elementMetadata(dds[rownames(sig_genes), ]))
meta_row <- cbind(meta_row,sig_genes)

# meta columns
meta_col <- as.data.frame(colData(dds))
```


```{r, fig.width=4, fig.height=5}
top_anno <- HeatmapAnnotation(df = meta_col[,c("dex","cell")], 
                              col = list(dex = c("trt"="darkred", "untrt"="dodgerblue4"),
                                         cell = c(N052611="#009E73", N061011="#D55E00", N080611="#56B4E9", N61311="#F0E442")),
                              border = TRUE)

draw(
  Heatmap(t(scale(t(mat))), name = "Z-score", border=TRUE,
          show_row_names = FALSE,
          show_row_dend = FALSE,
          show_column_names = FALSE,
          top_annotation = top_anno),
  merge_legend=TRUE)
```


Usually with such a simple result (clear two groups) it is better to not use annotations and instead use text annotation

```{r, fig.width=4, fig.height=5}
ht = draw(
  Heatmap(t(scale(t(mat))), name = "Z-score", 
          show_row_names = FALSE,
          show_row_dend = FALSE, 
          # split to get titles
          column_split = meta_col$dex, 
          # set dend split invisible
          show_parent_dend_line = FALSE,
          # set gap to zero for split
          column_gap = unit(0, "lines"),
          column_title_gp = gpar(fontface="bold"),
          show_column_names = FALSE, column_dend_side = "bottom"),
  merge_legend=TRUE)

# add annotation lines
decorate_column_title("Z-score", {
  grid.lines(x = c(0.1,0.9), y=0.2)
  grid.lines(x = c(1.1,1.9), y=0.2)
})
```

## Complex heatmap plot for CEMiTool results

```{r message=FALSE, results='hide'}
library(CEMiTool)
library(simplifyEnrichment)
library(dplyr)
```


First lets generate necessary 
```{r message=FALSE, results='hide'}
# Get cemitools object and GMT for pathways
data("cem")
gmt_fname <- system.file("extdata", "pathways.gmt", package = "CEMiTool")
gmt_in <- read_gmt(gmt_fname)

# perform over representation analysis
cem <- mod_ora(cem, gmt_in)
# Perform module enrichment
cem <- mod_gsea(cem)
```


```{r}
# Get genes in coexp modules
module_genes <- module_genes(cem)
module_genes <- module_genes[module_genes$modules != "Not.Correlated", ]

# standardize counts
exp_mat <- t(scale(t(as.matrix(cem@expression[module_genes$genes,]))))

# Get ORA res terms
ora_res <- cem@ora
terms2anno <- ora_res %>% dplyr::filter(p.adjust<0.05) %>% mutate(ID=gsub("_.*", "", ID)) %>% 
  dplyr::select(Module, ID) %>% 
  dplyr::filter(Module!="Not.Correlated")
terms2anno <- split(terms2anno$ID, terms2anno$Module)
```


```{r fig.width=6, fig.height=5}
# set colour scale to be universally the same
col_scale <- circlize::colorRamp2(breaks = c(-4,0,4), colors = c("dodgerblue4", "white", "darkorange"))

# row annotation wordclouds
row_annot <- rowAnnotation(`GO ORA` = anno_word_cloud(module_genes$modules, 
                                                              terms2anno, max_words = 15,
                                                              bg_gp = gpar(fill = "white", 
                                                                           col = "black"), 
                                                              fontsize_range=c(9,11)),  
                           gap = unit(0, "mm"),
                           show_annotation_name=TRUE)

# top annotation
top_anno = HeatmapAnnotation(Timepoint=gsub(".*._d", "", colnames(exp_mat)),
                             col = list(Timepoint=c("0"="lightblue", 
                                                    "3"="dodgerblue", 
                                                    "7"="dodgerblue4")))

draw(Heatmap(exp_mat, name="Expression (VST)",
       split = module_genes$modules, 
       border=T,
       show_row_names = FALSE, 
       show_column_names = FALSE,
       show_row_dend = FALSE,
       right_annotation = row_annot,
       top_annotation = top_anno,
       col = col_scale, 
       heatmap_legend_param = list(legend_direction = "horizontal")),
     merge_legends = T, heatmap_legend_side = "bottom")
```


We can also add annotation using other plotting tools, such as ggplot2 by generating a custom panel annotating function that uses indexes. 

Two of the four modules presented interesting results in the ORA.

We can generate a function that creates Enrichment analysis bar plots for the modules and use that later with `anno_zoom()`. 

```{r, fig.width=8, fig.height=7}
panel_fun_enr_results = function(index, nm) {
  
  # Get the module for selected indices
  mod <- module_genes %>% dplyr::filter(genes %in% rownames(exp_mat)[index]) %>% 
    .$modules %>% unique()
  
  # Get top 5 hits from the ORA results
  res_toplot <- ora_res %>% dplyr::filter(Module %in% mod) %>% 
    mutate(ID=stringr::str_trunc(ID, 30)) %>%
    arrange(p.adjust) %>%
    slice_head(n=5)
  
  # Generate the plot
  g = ggplot(res_toplot, aes(x = -log10(p.adjust), 
                             y = forcats::fct_reorder(ID, -p.adjust),
                             fill=FoldEnrichment)) + 
    geom_bar(stat="identity", alpha=0.8, colour="black") +
    theme_bw(12) +
    scale_x_sqrt(expand=c(0,0), limits=c(0,25)) +
    scale_fill_gradientn(colours=c("turquoise", "darkblue"), breaks = c(0,50)) +
    geom_vline(xintercept = -log10(0.05), linetype="dashed") +
    theme(axis.title.y = element_blank(),
        axis.text = element_text(colour="black"),
        axis.ticks.length = unit(0.5, "lines"),
        axis.line = element_blank(),
        panel.border = element_rect(colour = "black"),
        legend.title = element_blank(), 
        panel.grid = element_blank(),
        legend.position = "none")
  
  # Make a grob and push it from viewport  
  g = grid.grabExpr(print(g))
  pushViewport(viewport())
  grid.rect()
  grid.draw(g)
  popViewport()
  
}

```


We can now add the barplots for the indices that we define. In this case for M1 and M3. We can additionally add titles for the annotation boxes separately by pushing grid.text to view port.

To list all available components of the plot for coordinate selection you can use `list_components()` from ComplexHeatmap.

```{r, fig.width=8, fig.height=6.5}
# interesting module indices
ind_list <- lapply(c("M1", "M3"), function(x) {
 # Get genes and positions
 genes <- dplyr::filter(module_genes, modules %in% x)$genes
 which(rownames(exp_mat) %in% genes)
})

# Generate row annotation 
row_annot <- rowAnnotation(`GO ORA` = anno_zoom(align_to = ind_list, 
                                                which = "row", 
                                                panel_fun = panel_fun_enr_results, 
                                                # Set size for the annotation
                                                size = unit(5, "cm"), 
                                                width = unit(10.5, "cm")))

# Generate top annotation
top_anno = HeatmapAnnotation(Timepoint=gsub(".*._d", "", colnames(exp_mat)),
                             annotation_name_side = "left", 
                             annotation_legend_param = list(
                               Timepoint = list(legend_direction = "horizontal")),
                             col = list(Timepoint=c("0"="lightblue", 
                                                    "3"="dodgerblue", 
                                                    "7"="dodgerblue4")))

draw(Heatmap(exp_mat, name="Z-score",
       split = module_genes$modules, 
       border=T,
       show_row_names = FALSE, 
       show_column_names = FALSE,
       show_row_dend = FALSE,
       right_annotation = row_annot,
       top_annotation = top_anno,
       col = col_scale,
       heatmap_legend_param = list(direction = "horizontal")),
     merge_legends = T, heatmap_legend_side = "bottom", annotation_legend_side="bottom")

# add titles to the plot
seekViewport("annotation_Timepoint_1")
loc1 = deviceLoc(x = unit(1.8, "npc"), y = unit(0, "npc"))
loc2 = deviceLoc(x = unit(1.8, "npc"), y = unit(-14.7, "npc"))
seekViewport("global")
grid.text("M1 ORA results", x = loc1$x ,y = loc1$y)
grid.text("M2 ORA results", x = loc2$x ,y = loc2$y)
```

